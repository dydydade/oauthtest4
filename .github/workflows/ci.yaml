name: ci
on:
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ master ]
    # paths:
    # - 'src/**'

jobs:
  image-build:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: create env.properties file
        run: |
          echo "DB_ID=${{ secrets.DB_ID }}" >> env.properties
          echo "DB_PW=${{ secrets.DB_PW }}" >> env.properties
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> env.properties
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> env.properties
          echo "FACEBOOK_CLIENT_ID=${{ secrets.FACEBOOK_CLIENT_ID }}" >> env.properties
          echo "FACEBOOK_CLIENT_SECRET=${{ secrets.FACEBOOK_CLIENT_SECRET }}" >> env.properties
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> env.properties
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> env.properties
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> env.properties
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> env.properties
          echo "GMAIL_SMTP_PASSWORD=${{ secrets.GMAIL_SMTP_PASSWORD }}" >> env.properties
          echo "HOST=${{ secrets.HOST }}" >> env.properties
          echo "PORT=${{ secrets.PORT }}" >> env.properties
          echo "KEY_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}" >> env.properties
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> env.properties
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> env.properties
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> env.properties
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> env.properties
          mv env.properties src/main/resources/env.properties

      - name: login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: docker build
        run: |
          docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}

  image-run-test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    needs: [ image-build ]
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v4

      - name: login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: install docker compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: update docker-compose.yml
        run: |
          sed -i "/tikichat_server:/,/image: /s|image: .*|image: ${{ vars.REPOSITORY }}:${{ github.sha }}|g" docker-compose.yml

      - name: docker-compose up
        timeout-minutes: 2
        run: |
          docker-compose up -d

      - name: install wait-on
        run: |
          sudo apt-get install -y npm > /dev/null 
          npm install -g wait-on > /dev/null

      - name: wait for service to be ready
        run: wait-on http://localhost:${{ secrets.HTTP_PORT }}/actuator/health --timeout 60000

      - name: test application
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ secrets.HTTP_PORT }}/actuator/health)
          if [ $STATUS -ne 200 ]; then
            echo "Service is not healthy, status code: $STATUS"
            exit 1
          fi

      - name: stop docker-compose
        run: docker-compose down

      # # TODO: artifact 활용
      # - name: github.sha
      #   run: echo ${{ github.sha }} > github-sha.txt

      # - name: echo
      #   run: cat github-sha.txt

      # - name: upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: github-sha
      #     path: ./github-sha.txt


  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # - name: download artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: github-sha
      #     path: ./
      
      # - name: echo
      #   run: cat github-sha.txt

      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Create mainkey.pem from secrets
        run: |
          echo "${{ secrets.MAINKEY_PEM }}" > mainkey.pem
          chmod 600 mainkey.pem

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ec2-${{ secrets.AWS_EC_IP }}.${{ secrets.AWS_REGION }}.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: SSH to EC2 instance
        run: |
          ssh -i mainkey.pem ubuntu@ec2-${{ secrets.AWS_EC_IP }}.${{ secrets.AWS_REGION }}.compute.amazonaws.com << EOF
            ls -al
            sed -i "/tikichat_server:/,/image: /s|image: .*|image: ${{ vars.REPOSITORY }}:${{ github.sha }}|g" docker-compose.yml
            docker-compose down
            sudo rm -r master_db
            docker rmi ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}
            docker-compose up -d
          EOF

      - name: Remove mainkey.pem
        run: rm mainkey.pem
